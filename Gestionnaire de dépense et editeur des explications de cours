import tkinter as tk
import sqlite3
from datetime import date
class App:
    def __init__(self, master):
        self.master = master
        master.title("Gestion des dépenses académiques")

        # Connexion à la base de données
        self.conn = sqlite3.connect('JetaDevData.db')

        # Création de la table pour les dépenses
        self.conn.execute('''CREATE TABLE IF NOT EXISTS expenses
                             (id INTEGER PRIMARY KEY AUTOINCREMENT,
                              Date DATE,
                              syllabus REAL,
                              tp REAL,
                              interrogations REAL,
                              other REAL)''')
        self.conn.commit()

        # Frame pour les dépenses
        self.expenses_frame = tk.Frame(master)
        self.expenses_frame.pack(padx=10, pady=10)

        # Titre pour les dépenses
        self.expenses_title_label = tk.Label(self.expenses_frame, text="Dépenses")
        self.expenses_title_label.pack()

        # Champ pour Date
        self.syllabus_label = tk.Label(self.expenses_frame, text="Date:")
        self.syllabus_label.pack(side=tk.LEFT)
        self.syllabus_entry = tk.Entry(self.expenses_frame)
        self.syllabus_entry.pack(side=tk.LEFT)

        # Champ pour l'achat de syllabus
        self.syllabus_label = tk.Label(self.expenses_frame, text="Achat Syllabus:")
        self.syllabus_label.pack(side=tk.LEFT)
        self.syllabus_entry = tk.Entry(self.expenses_frame)
        self.syllabus_entry.pack(side=tk.LEFT)

        # Champ pour l'achat de TP
        self.tp_label = tk.Label(self.expenses_frame, text="Achat de TP:")
        self.tp_label.pack(side=tk.LEFT)
        self.tp_entry = tk.Entry(self.expenses_frame)
        self.tp_entry.pack(side=tk.LEFT)

        # Champ pour l'achat d'interrogations
        self.interrogations_label = tk.Label(self.expenses_frame, text="Achat des Interrogations:")
        self.interrogations_label.pack(side=tk.LEFT)
        self.interrogations_entry = tk.Entry(self.expenses_frame)
        self.interrogations_entry.pack(side=tk.LEFT)

        # Champ pour les autres dépenses
        self.other_label = tk.Label(self.expenses_frame, text="Autre dépense:")
        self.other_label.pack(side=tk.LEFT)
        self.other_entry = tk.Entry(self.expenses_frame)
        self.other_entry.pack(side=tk.LEFT)

        # Bouton pour ajouter les dépenses
        self.add_expenses_button = tk.Button(self.expenses_frame, text="Ajouter les dépenses", command=self.add_expenses)
        self.add_expenses_button.pack(pady=10)

        # Frame pour les explications de cours
        self.explanations_frame = tk.Frame(master)
        self.explanations_frame.pack(padx=10, pady=10)

        # Titre pour les explications de cours
        self.explanations_title_label = tk.Label(self.explanations_frame, text="Explications de cours")
        self.explanations_title_label.pack()

        # Liste déroulante pour sélectionner le cours
        self.course_label = tk.Label(self.explanations_frame, text="Sélectionner un cours:")
        self.course_label.pack(side=tk.LEFT)
        self.course_options = ["Base de logiciel", "Anglais", "Probabilité", "Algorithme"]
        self.course_variable = tk.StringVar(master)
        self.course_variable.set(self.course_options[0])
        self.course_dropdown = tk.OptionMenu(self.explanations_frame, self.course_variable, *self.course_options)
        self.course_dropdown.pack(side=tk.LEFT)

        # Éditeur de texte pour les explications de cours
        self.explanations_text = tk.Text(self.explanations_frame)
        self.explanations_text.pack(pady=10)

        # Bouton pour enregistrer les explications de cours
        self.save_explanations_button = tk.Button(self.explanations_frame, text="Enregistrer les explications", command=self.save_explanations)
        self.save_explanations_button.pack()

        # Frame pour le total des dépenses
        self.total_frame = tk.Frame(master)
        self.total_frame.pack(padx=10, pady=10)

        # Label pour le total des dépenses
        self.total_label = tk.Label(self.total_frame, text="Total des dépenses: ")
        self.total_label.pack(side=tk.LEFT)
        self.total_value_label = tk.Label(self.total_frame, text="")
        self.total_value_label.pack(side=tk.LEFT)

    def add_expenses(self):
        # Récupérer les valeurs des champs de dépenses
        syllabus = float(self.syllabus_entry.get())
        tp = float(self.tp_entry.get())
        interrogations = float(self.interrogations_entry.get())
        other = float(self.other_entry.get())

        # Calculer le total des dépenses
        total = syllabus + tp + interrogations + other

        # Ajouter les dépenses à la base de données avec la date actuelle
        today = date.today().strftime('%Y-%m-%d')
        self.conn.execute("INSERT INTO expenses (syllabus, tp, interrogations, other, date) VALUES (?, ?, ?, ?, ?)", (syllabus, tp, interrogations, other, today))
        self.conn.commit()

        # Afficher le total des dépenses
        self.total_value_label.config(text=total)

    def save_explanations(self):
        # Récupérer le texte des explications de cours et le cours sélectionné
        explanations = self.explanations_text.get("1,0", tk.END)
        course = self.course_variable.get()

        # Code pour enregistrer les explications de cours dans une base de données ou un fichier

        # Effacer le texte de l'éditeur
        self.explanations_text.delete("1.0", tk.END)

        # Afficher un message de confirmation
        tk.messagebox.showinfo("Enregistrement réussi", f"Les explications pour le cours de {course} ont été enregistrées avec succès.")

# Créer une instance de l'interface utilisateur
root = tk.Tk()
app = App(root)

# Lancer la boucle principale de l'interface utilisateur
root.mainloop()

